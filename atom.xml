<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bigshen blog</title>
  
  <subtitle>bigshen blog</subtitle>
  <link href="https://bigshen123.github.io/atom.xml" rel="self"/>
  
  <link href="https://bigshen123.github.io/"/>
  <updated>2023-02-01T04:45:12.907Z</updated>
  <id>https://bigshen123.github.io/</id>
  
  <author>
    <name>yongjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线上问题排查</title>
    <link href="https://bigshen123.github.io/2023/02/01/Operation/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://bigshen123.github.io/2023/02/01/Operation/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</id>
    <published>2023-02-01T04:40:51.546Z</published>
    <updated>2023-02-01T04:45:12.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线上cpu飙高时问题排查命令？"><a href="#线上cpu飙高时问题排查命令？" class="headerlink" title="线上cpu飙高时问题排查命令？"></a>线上cpu飙高时问题排查命令？</h2><ul><li>查看所有进程cpu使用：使用top命令 查看cpu使用情况</li><li>定位线程：比如PID&#x3D;1893 命令：top-Hp 1893</li><li>定位代码：比如ID&#x3D;4519的线程cpu飙升则 需要把4519这个线程转成16进制，命令：printf %x 4519</li><li>接下来 通过jstack命令，查看栈信息，命令sudo -u admin jstack 1893 |grep -A 200 11a7。</li></ul><p>另外，线上问题排查还可以使用Alibaba开源的工具Arthas进行排查，以上问题，可以使用一下命令定位：<br>thread -n 3 &#x2F;&#x2F;查看cpu占比前三的线程</p><h2 id="线上Out-of-Memory-Error如何定位问题？"><a href="#线上Out-of-Memory-Error如何定位问题？" class="headerlink" title="线上Out of Memory Error如何定位问题？"></a>线上Out of Memory Error如何定位问题？</h2><p>使用工具查看内存使用情况，如 top、htop、vmstat、free 等。这些工具可以帮助您查看内存使用情况，并确定高内存使用的进程。<br>free -h</p><h2 id="查看内存占用最高的进程"><a href="#查看内存占用最高的进程" class="headerlink" title="查看内存占用最高的进程"></a>查看内存占用最高的进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux --sort -rss</span><br></pre></td></tr></table></figure><p>使用 “gcore <pid>“ 对占用内存最多的进程进行转储。<br>使用 “valgrind –tool&#x3D;memcheck –leak-check&#x3D;full <program>“ 检查程序中的内存泄露。</p><ul><li><p>如果你想要更细粒度的监控内存, 你可以使用 valgrind 和massif工具来检测内存泄漏。<br>使用工具查看堆栈信息，如 jmap、jstack 等。这些工具可以帮助您查看线程堆栈信息，并确定高内存使用的代码。<br>使用 “jmap -heap <pid>“ 查看 Java 进程的堆内存使用情况。<br>使用 “jmap -histo <pid>“ 查看 Java 进程中对象的内存使用情况。<br>使用 “jstack <pid>“ 查看 Java 进程的堆栈跟踪信息。<br>使用 “jstack -F <pid>“ 强制导出 Java 进程的堆栈跟踪信息。<br>使用 “jstack -m <pid>“ 查看 Java 进程中的多线程堆栈跟踪信息。</p></li><li><p>分析 GC 日志，查看垃圾收集器的工作情况。如果 GC 次数过多或停顿时间过长，可能是内存泄露的原因。<br>使用 “-verbose:gc” 选项启用 GC 日志记录。<br>使用 “-XX:+PrintGCDetails” 选项记录 GC 的详细信息。<br>使用 “-Xloggc:<file>“ 选项将 GC 日志写入指定文件。<br>使用工具如 GCViewer、VisualVM 等来可视化 GC 日志。<br>通过观察 GC 日志中的每次 GC 操作的耗时、垃圾收集类型、回收的内存大小等信息来分析 GC 情况。</p></li><li><p>检查代码中是否有内存泄露的现象，如有大量的对象创建或长时间不释放的对象。</p></li><li><p>检查代码是否有内存消耗过大的操作，如频繁创建大量对象或使用大量缓存。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线上cpu飙高时问题排查命令？&quot;&gt;&lt;a href=&quot;#线上cpu飙高时问题排查命令？&quot; class=&quot;headerlink&quot; title=&quot;线上cpu飙高时问题排查命令？&quot;&gt;&lt;/a&gt;线上cpu飙高时问题排查命令？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;查看所有进程cpu使用：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>系统问题排查工具</title>
    <link href="https://bigshen123.github.io/2023/02/01/Operation/%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/"/>
    <id>https://bigshen123.github.io/2023/02/01/Operation/%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/</id>
    <published>2023-02-01T04:39:55.169Z</published>
    <updated>2023-02-01T04:47:33.910Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">smartmontools</span><br><span class="line">lm_sensors</span><br><span class="line">iotop</span><br><span class="line">sysstat</span><br><span class="line">nc</span><br><span class="line">nmap</span><br><span class="line">lrzsz</span><br><span class="line">strace</span><br><span class="line">vim</span><br></pre></td></tr></table></figure><p>排查iowait问题</p><p>iotop<br>参考：<a href="https://blog.csdn.net/chj_1224365967/article/details/108142938">https://blog.csdn.net/chj_1224365967/article/details/108142938</a><br>iotop (选项)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-o：只显示有io操作的进程</span><br><span class="line">-b：批量显示，无交互，主要用作记录到文件。</span><br><span class="line">-n NUM：显示NUM次，主要用于非交互式模式。</span><br><span class="line">-d SEC：间隔SEC秒显示一次。</span><br><span class="line">-p PID：监控的进程pid。</span><br><span class="line">-u USER：监控的进程用户。</span><br></pre></td></tr></table></figure><p>iostats<br>参考：<a href="https://blog.csdn.net/huxinglixing/article/details/116306731">https://blog.csdn.net/huxinglixing/article/details/116306731</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">参数    详解</span><br><span class="line"></span><br><span class="line">-c    只显示cpu相关统计信息（默认是同时显示cpu和磁盘信息）</span><br><span class="line"></span><br><span class="line">-d    只显示磁盘统计信息（默认是同时显示cpu和磁盘信息）</span><br><span class="line"></span><br><span class="line">-h    使用NFS的输出报告更加友好可读。</span><br><span class="line"></span><br><span class="line">-j &#123; ID | LABEL | PATH | UUID | … &#125;    磁盘列表的Device列要用什么维度来描述磁盘</span><br><span class="line"></span><br><span class="line">-k    默认情况下，iostat的输出是以block作为计量单位，加上这个参数可以以kb作为计量单位显示。（该参数仅在linux内核版本2.4以后数据才是准确的）</span><br><span class="line"></span><br><span class="line">-m    默认情况下，iostat的输出是以block作为计量单位，加上这个参数可以以mb作为计量单位显示。（该参数仅在linux内核版本2.4以后数据才是准确的）</span><br><span class="line"></span><br><span class="line">-N    显示磁盘阵列(LVM) 信息</span><br><span class="line"></span><br><span class="line">-n    显示NFS相关统计数据（network fileSystem）。（该参数只在linux内核版本2.6.17之后有用）</span><br><span class="line"></span><br><span class="line">-p [ &#123; device [,…] | ALL &#125; ]    显示磁盘分区的相关统计信息（默认粒度只到磁盘，没有显示具体的逻辑分区）</span><br><span class="line"></span><br><span class="line">-t    显示终端和CPU的信息，每次输出报告时显示系统时间。</span><br><span class="line"></span><br><span class="line">-V    显示当前iostat的版本信息</span><br><span class="line"></span><br><span class="line">-x    显示更详细的磁盘报告信息，默认只显示六列，加上该参数后会显示更详细的信息。（该参数需要在内核版本2.4之后才能使用）</span><br><span class="line"></span><br><span class="line">-y    跳过不显示第一次报告的数据，因为iostat使用的是采样统计，所以iostat的第一次输出的数据是自系统启动以来累计的数据</span><br><span class="line"></span><br><span class="line">-z    只显示在采样周期内有活动的磁盘</span><br></pre></td></tr></table></figure><p>每1s刷新一次，共刷新10次，-K表示单位为kb，-d表示只统计磁盘信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -d -k 1 10</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>思路清晰的编码</title>
    <link href="https://bigshen123.github.io/2023/02/01/Learn/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0%E7%9A%84%E7%BC%96%E7%A0%81/"/>
    <id>https://bigshen123.github.io/2023/02/01/Learn/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0%E7%9A%84%E7%BC%96%E7%A0%81/</id>
    <published>2023-02-01T04:38:19.419Z</published>
    <updated>2023-02-01T06:20:36.154Z</updated>
    
    <content type="html"><![CDATA[<p>编写清晰、思路清晰的代码需要一定的技巧和经验。以下是一些建议，帮助你编写清晰的代码：</p><ol><li>使用有意义的变量和函数名称: 尽量使用有意义的变量和函数名称，而不是缩写或编码。这样可以让代码易于理解和维护。</li><li>遵循代码约定: 遵循项目团队或社区通用的代码约定，可以让你的代码与其他人的代码保持一致，更易于阅读和理解。</li><li>将复杂的代码划分成函数: 将复杂的代码拆分成多个函数，这样可以让每个函数的逻辑更清晰，更易于阅读和理解。</li><li>使用注释: 适当地使用注释，以解释代码的目的和工作原理，这样可以让代码更易于理解和维护。</li><li>代码重构：当你的代码变得难以理解和维护时，不要犹豫重构它，以使它变得更加清晰和可维护。</li><li>多测试:测试能帮助你编写出更可靠和易于维护的代码</li><li>多思考多实践，编程能力是需要经过长时间积累才能提高的。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编写清晰、思路清晰的代码需要一定的技巧和经验。以下是一些建议，帮助你编写清晰的代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用有意义的变量和函数名称: 尽量使用有意义的变量和函数名称，而不是缩写或编码。这样可以让代码易于理解和维护。&lt;/li&gt;
&lt;li&gt;遵循代码约定: 遵循项目团队或社</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>提升工作能力</title>
    <link href="https://bigshen123.github.io/2023/02/01/Learn/%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E8%83%BD%E5%8A%9B/"/>
    <id>https://bigshen123.github.io/2023/02/01/Learn/%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E8%83%BD%E5%8A%9B/</id>
    <published>2023-02-01T04:37:02.281Z</published>
    <updated>2023-02-01T04:38:58.646Z</updated>
    
    <content type="html"><![CDATA[<ul><li>凡事有交代，件件有着落，事事有回音</li><li>遇到问题及时反馈，出方案时让领导选择。不同选项列出利弊，且表明自己的倾向性</li><li>考虑问题细致，尽量没有遗漏</li><li>行动力强，不要让人催着做事情</li><li>遇事第一反应是解决，而不是推卸责任</li><li>高智商情商 说话让人舒服，做事让人放心</li><li>被指出不足时，先反思，而不是本能的反驳和解释。有则改之，无则加勉。不认可的可以私下沟通</li><li>逆境时不能消沉，能一起扛事</li><li>沟通能力强，有效率</li><li>和领导保持高度一致</li><li>勤奋的品质</li><li>可以自己找活干</li><li>对工作成果精益求精（不要怕麻烦）</li><li>做好自己的个人形象管理</li><li>确认每日工作目标，具体化 不需要太多 但一定是可以完成的~</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;凡事有交代，件件有着落，事事有回音&lt;/li&gt;
&lt;li&gt;遇到问题及时反馈，出方案时让领导选择。不同选项列出利弊，且表明自己的倾向性&lt;/li&gt;
&lt;li&gt;考虑问题细致，尽量没有遗漏&lt;/li&gt;
&lt;li&gt;行动力强，不要让人催着做事情&lt;/li&gt;
&lt;li&gt;遇事第一反应是解决，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bigshen123.github.io/2023/02/01/hello-world/"/>
    <id>https://bigshen123.github.io/2023/02/01/hello-world/</id>
    <published>2023-02-01T03:23:41.004Z</published>
    <updated>2023-02-01T04:55:59.816Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more<br>info. If you get any problems when using Hexo, you can find the answer<br>in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me<br>on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init [folder]<br></code></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
