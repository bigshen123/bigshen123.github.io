<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more<br>info. If you get any problems when using Hexo, you can find the answer<br>in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me<br>on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo init [folder]<br></code></pre></td></tr></table></figure>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>思路清晰的编码</title>
    <url>/2023/02/01/Learn/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0%E7%9A%84%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>编写清晰、思路清晰的代码需要一定的技巧和经验。以下是一些建议，帮助你编写清晰的代码：</p>
<ol>
<li>使用有意义的变量和函数名称: 尽量使用有意义的变量和函数名称，而不是缩写或编码。这样可以让代码易于理解和维护。</li>
<li>遵循代码约定: 遵循项目团队或社区通用的代码约定，可以让你的代码与其他人的代码保持一致，更易于阅读和理解。</li>
<li>将复杂的代码划分成函数: 将复杂的代码拆分成多个函数，这样可以让每个函数的逻辑更清晰，更易于阅读和理解。</li>
<li>使用注释: 适当地使用注释，以解释代码的目的和工作原理，这样可以让代码更易于理解和维护。</li>
<li>代码重构：当你的代码变得难以理解和维护时，不要犹豫重构它，以使它变得更加清晰和可维护。</li>
<li>多测试:测试能帮助你编写出更可靠和易于维护的代码</li>
<li>多思考多实践，编程能力是需要经过长时间积累才能提高的。</li>
</ol>
]]></content>
      <categories>
        <category>工作总结</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>提升工作能力</title>
    <url>/2023/02/01/Learn/%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<ul>
<li>凡事有交代，件件有着落，事事有回音</li>
<li>遇到问题及时反馈，出方案时让领导选择。不同选项列出利弊，且表明自己的倾向性</li>
<li>考虑问题细致，尽量没有遗漏</li>
<li>行动力强，不要让人催着做事情</li>
<li>遇事第一反应是解决，而不是推卸责任</li>
<li>高智商情商 说话让人舒服，做事让人放心</li>
<li>被指出不足时，先反思，而不是本能的反驳和解释。有则改之，无则加勉。不认可的可以私下沟通</li>
<li>逆境时不能消沉，能一起扛事</li>
<li>沟通能力强，有效率</li>
<li>和领导保持高度一致</li>
<li>勤奋的品质</li>
<li>可以自己找活干</li>
<li>对工作成果精益求精（不要怕麻烦）</li>
<li>做好自己的个人形象管理</li>
<li>确认每日工作目标，具体化 不需要太多 但一定是可以完成的~</li>
</ul>
]]></content>
      <categories>
        <category>工作总结</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM参数、命令</title>
    <url>/2023/02/22/Java/JVM/</url>
    <content><![CDATA[<h2 id="JVM常用调优参数"><a href="#JVM常用调优参数" class="headerlink" title="JVM常用调优参数"></a>JVM常用调优参数</h2><ul>
<li><p>堆大小相关参数：</p>
<blockquote>
<p>-Xmx: 最大堆大小，一般设置为机器内存的 70% 到 80%<br>-Xms: 初始堆大小，一般设置为与最大堆大小相同，可以避免在应用启动后频繁扩展堆大小导致的性能问题<br>-Xmn: 年轻代大小，根据应用的内存需求进行调整<br>-XX:MaxPermSize：设置永久代（Permanent Generation）大小，一般设置为 256MB 到 512MB</p>
</blockquote>
</li>
<li><p>垃圾回收相关参数：</p>
<blockquote>
<p>-XX:+UseG1GC：使用 G1 垃圾回收器，可以提高应用的垃圾回收性能和响应时间<br>-XX:+UseParallelGC：使用并行垃圾回收器，可以提高多核处理器上的垃圾回收性能<br>-XX:+UseConcMarkSweepGC：使用 CMS 垃圾回收器，可以在减少应用停顿时间的同时保证垃圾回收性能<br>-XX:MaxGCPauseMillis：设置垃圾回收的最大停顿时间，可以根据应用需求进行调整</p>
</blockquote>
</li>
<li><p>线程池相关参数：</p>
<blockquote>
<p>-XX:ParallelGCThreads：设置并行垃圾回收器的线程数，可以根据机器的 CPU 核数进行调整<br>-XX:ConcGCThreads：设置 CMS 垃圾回收器的并发线程数，可以根据机器的 CPU 核数进行调整<br>-XX:ThreadStackSize：设置线程栈大小，可以根据应用的线程需求进行调整</p>
</blockquote>
</li>
<li><p>类加载相关参数：</p>
<blockquote>
<p>-XX:+TraceClassLoading：打印类加载信息<br>-XX:+TraceClassUnloading：打印类卸载信息<br>-XX:MaxMetaspaceSize：设置元数据空间大小，一般设置为机器内存的 25% 到 30%</p>
</blockquote>
</li>
<li><p>JIT 相关参数：</p>
<blockquote>
<p>-XX:+PrintCompilation：打印方法的即时编译信息，可以用于分析代码的热点和性能问题<br>-XX:+PrintInlining：打印内联信息，可以用于分析内联的效果和影响<br>-XX:CompileThreshold：设置方法被调用多少次后才进行即时编译，可以根据应用的特性进行调整</p>
</blockquote>
</li>
<li><p>GC 日志相关参数：</p>
<blockquote>
<p>-verbose:gc：打印 GC 日志，包括 GC 时间、堆大小、堆使用情况等信息<br>-XX:+PrintGC：打印 GC 日志，包括 GC 时间、GC 类型、堆大小、堆使用情况等信息<br>-XX:+PrintGCDetails：打印 GC 详细信息，包括每个区域的大小、使用情况、GC 前后的情况等信息<br>-XX:+PrintGCDateStamps：打印 GC 时间戳<br>-XX:+PrintHeapAtGC：打印 GC 时堆的详细信息，包括每个区域的大小、使用情况、GC 前后的情况等信息</p>
</blockquote>
</li>
<li><p>其他常用参数：</p>
<blockquote>
<p>-XX:+DisableExplicitGC：禁用显式 GC，防止代码中出现显式调用 System.gc() 导致的性能问题<br>-XX:+UseCompressedOops：启用压缩指针，可以减少对象引用的内存占用<br>-XX:+UseBiasedLocking：启用偏向锁，可以减少无竞争情况下的锁操作开销<br>-XX:+UseLargePages：启用大页内存，可以提高内存访问性能</p>
</blockquote>
</li>
</ul>
<h2 id="jps-查看正在运行的Java进程"><a href="#jps-查看正在运行的Java进程" class="headerlink" title="jps 查看正在运行的Java进程"></a>jps 查看正在运行的Java进程</h2><p>jps 是 JDK 自带的一个工具，用于查看正在运行的 Java 进程信息。它可以显示 Java 进程的进程 ID（PID）和主类名等信息。</p>
<p>除了显示 PID 和主类名，jps 还可以显示以下信息：</p>
<p>-l：显示主类的全名，而不仅仅是类名<br>-m：显示传递给主类 main() 方法的参数<br>-v：显示传递给 JVM 的参数<br>例如，要显示主类的全名和传递给主类 main() 方法的参数，可以使用命令：jps -lvm</p>
<p>使用 jps 工具可以方便地查看系统中正在运行的 Java 进程信息，特别是在需要管理多个 Java 进程的情况下，它可以帮助用户快速定位需要的 Java 进程。</p>
<h2 id="jstat-查看JVM统计信息"><a href="#jstat-查看JVM统计信息" class="headerlink" title="jstat 查看JVM统计信息"></a>jstat 查看JVM统计信息</h2><p>jstat 是 JDK 自带的一个工具，用于查看 JVM 内部的统计信息，例如垃圾回收（GC）情况、类加载情况、线程情况等。</p>
<p>命令使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"></span><br><span class="line">option 表示需要查看的统计信息类型，</span><br><span class="line">vmid 表示 JVM 的进程 ID，</span><br><span class="line">interval 表示输出数据的时间间隔（单位为毫秒），</span><br><span class="line">count 表示输出数据的次数。</span><br><span class="line"></span><br><span class="line">jstat 常用统计信息选项：</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> gc：垃圾回收情况</span><br><span class="line"></span><br><span class="line">S0C：Survivor0 区域的大小</span><br><span class="line">S1C：Survivor1 区域的大小</span><br><span class="line">S0U：Survivor0 区域已使用的大小</span><br><span class="line">S1U：Survivor1 区域已使用的大小</span><br><span class="line">EC：Eden 区域的大小</span><br><span class="line">EU：Eden 区域已使用的大小</span><br><span class="line">OC：老年代的大小</span><br><span class="line">OU：老年代已使用的大小</span><br><span class="line">PC：永久代的大小</span><br><span class="line">PU：永久代已使用的大小</span><br><span class="line">YGC：年轻代垃圾回收次数</span><br><span class="line">YGCT：年轻代垃圾回收消耗时间</span><br><span class="line">FGC：Full GC 次数</span><br><span class="line">FGCT：Full GC 消耗时间</span><br><span class="line">GCT：所有 GC 消耗时间</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">class：类加载情况</span><br><span class="line"></span><br><span class="line">Loaded：当前加载的类的数量</span><br><span class="line">Bytes：当前加载的类所占用的字节数</span><br><span class="line">Unloaded：已卸载的类的数量</span><br><span class="line">Bytes：已卸载的类所占用的字节数</span><br><span class="line">compiler：JIT 编译器情况</span><br><span class="line"></span><br><span class="line">Compiled：已编译的方法数量</span><br><span class="line">Failed：编译失败的方法数量</span><br><span class="line">Invalid：无效的方法数量</span><br><span class="line">Time：编译所消耗的时间</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">thread：线程情况</span><br><span class="line"></span><br><span class="line">N：当前活动线程的数量</span><br><span class="line">S：Java 线程状态的统计信息（包括 NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED 等状态）</span><br><span class="line">Blocked：被阻塞的 Java 线程的数量</span><br><span class="line">Wait：正在等待某个 Java 对象的 Java 线程的数量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例如，要查看某个 Java 进程的 GC 情况，可以使用以下命令：</span><br><span class="line">jstat -gc &lt;vmid&gt;</span><br><span class="line"></span><br><span class="line">要定时输出 GC 情况，可以使用以下命令：</span><br><span class="line">jstat -gc &lt;vmid&gt; &lt;interval&gt; &lt;count&gt;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">jstat 还支持许多其他的选项：</span><br><span class="line">gccapacity：GC 容量</span><br><span class="line">gccause：GC 原因</span><br><span class="line">gcnew：年轻代 GC 情况</span><br><span class="line">gcnewcapacity：年轻代 GC 容量</span><br><span class="line">gcold：老年代 GC 情况</span><br><span class="line">gcoldcapacity：老年代 GC 容量</span><br><span class="line">gcmetacapacity：元数据 GC 容量</span><br><span class="line">gcutil：GC 统计信息</span><br><span class="line">printcompilation：打印已编译的方法</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 jstat 工具需要注意以下几点：<blockquote>
<p>jstat 工具只能监视已启动的 JVM 进程，无法监视尚未启动的进程。<br>如果要使用 jstat 工具查看某个进程的统计信息，需要知道该进程的 PID。<br>在使用 jstat 工具时，建议使用比较小的 interval 和 count 参数，以免过多地干扰 JVM 的正常运行。</p>
</blockquote>
</li>
</ul>
<p>1、-class举例：<br>jstat -class -t -h3 13152 1000 10，<br>其中h3中的3代表每隔3个分隔一次，13152代表类的进程id，1000代表每隔1000毫秒打印一次，10代表一共打印10次，如下所示：</p>
<p>其中Timestamp代表程序至今的运行时间，单位为秒；Loaded代表加载的类的数目；Bytes代表加载的类的总字节数；Unloaded代表卸载的类的数目；Bytes代表卸载的类的总字节数；Time代表类装载所消耗的时间；</p>
<p>2、-gc举例：jstat -gc 13152，其中13152代表类的进程id，执行结果如下所示：<br>其中S0C代表幸存者0区的总容量，S1C代表幸存者1区的总容量，S0U代表幸存者0区使用的容量，S1U代表幸存者1区使用的容量，EC代表伊甸园区的总容量，EU代表伊甸园区使用的总容量，OC代表老年代的总容量，OU代表老年代已经使用的容量，MC代表方法区的总容量，MU代表方法区的总容量，CCSC代表压缩类的总容量，CCSU代表压缩类使用的容量，YGC代表年轻代垃圾回收的次数，YGCT年轻代进行垃圾回收需要的时间，FGC代表代表Full GC的次数，FGCT代表Full GC的时间，GCT代表垃圾回收的总时间</p>
<p>3、-gccapacity举例：jstat -gccapacity 13152，其中13152代表类的进程id，执行结果如下：</p>
<p>其中S0C代表幸存者0区的容量，S1C代表幸存者1区的容量，EC代表伊甸园区的容量，CCSC代表压缩类的容量，YGC代表年轻代垃圾回收的时间，FGC代表Full GC垃圾回收的时间</p>
<p>4、-gcutil举例：jstat -gcutil 13152，其中13152代表类的进程id，执行结果如下所示：</p>
<p>以上是各区域占比以及垃圾回收的情况，S0代表幸存者0区，S1代表幸存者1区，E代表伊甸园区，O代表老年代，M代表方法区，CCS代表压缩类，以上这些值都是占比情况，YGC代表年轻代垃圾回收的次数，YGCT年轻代进行垃圾回收需要的时间，FGC代表代表Full GC的次数，FGCT代表Full GC的时间，GCT代表垃圾回收的总时间</p>
<p>5、-gccause举例：jstat -gccause 13152，其中13152代表类的进程id，执行结果如下：</p>
<p>以上是各区域占比以及垃圾回收的情况，还有触发垃圾回收的原因解释，S0代表幸存者0区，S1代表幸存者1区，E代表伊甸园区，O代表老年代，M代表方法区，CCS代表压缩类，以上这些值都是占比情况，YGC代表年轻代垃圾回收的次数，YGCT年轻代进行垃圾回收需要的时间，FGC代表代表Full GC的次数，FGCT代表Full GC的时间，GCT代表垃圾回收的总时间，LGCC和GCC代表垃圾回收的原因</p>
<h2 id="jinfo-实时查看和修改JVM配置参数"><a href="#jinfo-实时查看和修改JVM配置参数" class="headerlink" title="jinfo 实时查看和修改JVM配置参数"></a>jinfo 实时查看和修改JVM配置参数</h2><p>jinfo 是一个非常有用的 JVM 监控工具，它可以用来实时查看和修改正在运行的 JVM 进程的配置参数。使用 jinfo 工具可以轻松地获取 JVM 进程的详细信息，包括启动参数、系统属性、线程堆栈等，还可以修改某些配置参数，例如堆大小、GC 策略等。</p>
<p>下面是一些常用的 jinfo 命令选项：</p>
<p>-flag name：查看指定名称的 JVM 配置参数<br>-flags：查看所有 JVM 配置参数<br>-sysprops：查看所有系统属性<br>-h：查看帮助信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">例如，要查看正在运行的进程</span> <span class="string">ID</span> <span class="string">为</span> <span class="number">1234</span> <span class="string">的</span> <span class="string">JVM</span> <span class="string">进程的堆大小，可以使用以下命令：</span></span><br><span class="line"><span class="string">jinfo</span> <span class="string">-flag</span> <span class="string">HeapSize</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="string">如果需要修改堆大小，可以使用以下命令：</span></span><br><span class="line"><span class="string">jinfo</span> <span class="string">-flag</span> <span class="string">HeapSize=2g</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="string">此命令将堆大小修改为</span> <span class="string">2GB。需要注意的是，不是所有的</span> <span class="string">JVM</span> <span class="string">配置参数都可以通过</span> <span class="string">jinfo</span> <span class="string">命令来修改，例如部分参数只能在</span> <span class="string">JVM</span> <span class="string">启动时设置。因此，在使用</span> <span class="string">jinfo</span> <span class="string">工具时，需要仔细阅读相关文档，了解各个参数的使用方法和限制。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="jstatd-远程主机信息收集"><a href="#jstatd-远程主机信息收集" class="headerlink" title="jstatd 远程主机信息收集"></a>jstatd 远程主机信息收集</h2><p>jstatd 是 JDK 自带的一个远程监控工具，可以用来远程收集其他主机上的 JVM 统计信息。使用 jstatd 工具可以方便地在多台主机上监控 JVM 进程的状态，快速定位和解决性能问题。</p>
<p>要使用 jstatd 工具，需要在远程主机上启动 jstatd 进程，并将其注册到 RMI 注册表中。具体步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、在远程主机上启动 jstatd 进程：</span><br><span class="line"></span><br><span class="line">jstatd -J-Djava.security.policy=&lt;(<span class="built_in">echo</span> <span class="string">&#x27;grant codebase &quot;file:$&#123;java.home&#125;/../lib/tools.jar&quot; &#123; permission java.security.AllPermission; &#125;;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">2、在本地主机上使用 jstat 命令连接远程 jstatd 进程：</span><br><span class="line">jstat -t hostname:port</span><br><span class="line"></span><br><span class="line">其中，hostname 是远程主机的名称或 IP 地址，port 是 jstatd 进程监听的端口号。</span><br><span class="line"></span><br><span class="line">使用 jstatd 工具需要注意以下几点：</span><br><span class="line"></span><br><span class="line">jstatd 工具默认使用不安全的 RMI 协议，存在一定的安全风险，因此建议在内部网络环境中使用。</span><br><span class="line">jstatd 工具可能会对 JVM 的性能产生一定的影响，因此建议在生产环境中谨慎使用。</span><br><span class="line">jstatd 工具只能监控已经启动的 JVM 进程，无法监控尚未启动的进程。</span><br></pre></td></tr></table></figure>

<h2 id="jcmd-多功能命令行"><a href="#jcmd-多功能命令行" class="headerlink" title="jcmd 多功能命令行"></a>jcmd 多功能命令行</h2><p>jcmd 是 JDK 自带的一个多功能命令行工具，可以用来查看和控制正在运行的 JVM 进程。jcmd 工具提供了一系列命令，可以用来查看 JVM 进程的运行状态、线程堆栈、GC 状态、堆转储等信息，还可以进行一些诊断和调试操作，例如强制执行 Full GC、打印线程堆栈、生成 HeapDump 等。</p>
<p>下面是一些常用的 jcmd 命令选项：</p>
<p>jcmd <pid> help：查看支持的命令列表<br>jcmd <pid> VM.flags：查看 JVM 启动参数<br>jcmd <pid> VM.system_properties：查看系统属性<br>jcmd <pid> Thread.print：打印线程堆栈<br>jcmd <pid> GC.run：强制执行 Full GC<br>jcmd <pid> VM.heap_dump filename：生成 HeapDump 文件</p>
<p>例如，要查看正在运行的进程 ID 为 1234 的 JVM 进程的线程堆栈，可以使用以下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jcmd <span class="number">1234</span> Thread.<span class="built_in">print</span></span><br></pre></td></tr></table></figure>

<p>如果需要强制执行 Full GC，可以使用以下命令：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">jcmd</span> <span class="number">1234 </span><span class="string">GC.run</span></span><br></pre></td></tr></table></figure>

<p>此命令将触发 JVM 执行 Full GC。</p>
<p>需要注意的是，jcmd 命令只能用于正在运行的 JVM 进程，无法对已经停止的进程进行诊断和调试。此外，jcmd 命令可能会对 JVM 的性能产生一定的影响，因此建议在生产环境中谨慎使用。</p>
<h2 id="jstack-打印JVM中线程快照"><a href="#jstack-打印JVM中线程快照" class="headerlink" title="jstack 打印JVM中线程快照"></a>jstack 打印JVM中线程快照</h2><p>jstack 是 JDK 自带的一个命令行工具，用于生成当前 JVM 进程中所有线程的堆栈跟踪信息，可以用来排查线程相关的性能问题。</p>
<p>要使用 jstack 工具，需要先找到正在运行的 JVM 进程 ID。可以使用 jps 命令查看正在运行的 Java 进程，然后使用 jstack 命令打印堆栈跟踪信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstack &lt;pid&gt;</span><br><span class="line">其中，pid 是正在运行的 Java 进程 ID。</span><br></pre></td></tr></table></figure>

<p>jstack 命令执行后，将在控制台上输出所有线程的堆栈跟踪信息。</p>
<p>对于每个线程，jstack 将显示该线程的状态、线程 ID、所属进程 ID、当前调用栈的方法列表等信息。</p>
<p>jstack 工具可以用来查看线程死锁、线程等待、线程阻塞等问题，快速定位和解决性能问题。使用 jstack 工具需要注意以下几点：</p>
<ul>
<li>jstack 工具只能查看当前 JVM 进程中的线程堆栈信息，无法查看已经停止的进程或其他 JVM 进程的信息。</li>
<li>jstack 工具在生成线程堆栈信息时，可能会对 JVM 的性能产生一定的影响，因此建议在生产环境中谨慎使用。</li>
<li>jstack 工具只提供了线程堆栈信息，对于其他的 JVM 统计信息，例如内存使用情况、GC 统计信息等，需要使用其他工具，例如 jstat、jconsole 等。</li>
</ul>
<h2 id="jhat-JDK自带堆分析工具"><a href="#jhat-JDK自带堆分析工具" class="headerlink" title="jhat JDK自带堆分析工具"></a>jhat JDK自带堆分析工具</h2><p>jhat 是 JDK 自带的一个堆分析工具，可以帮助开发人员快速诊断 Java 程序中的内存问题。它通过将堆转换为一个 HTTP 服务器，提供了一个基于 Web 的用户界面，以便开发人员能够查看 Java 堆中的对象、引用和其他相关信息。</p>
<p>使用 jhat 工具需要先生成 Java 堆转储文件（heap dump），可以使用 jmap 命令生成 Java 堆转储文件。生成堆转储文件后，可以使用 jhat 命令启动 jhat 服务器，将堆转储文件加载到服务器中，然后通过浏览器访问 jhat 服务器，查看 Java 堆中的对象、引用和其他相关信息。</p>
<p>以下是 jhat 命令的使用示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">jhat &lt;heap_dump_file&gt;</span><br><span class="line">其中，heap_dump_file 是 Java 堆转储文件的路径。</span><br></pre></td></tr></table></figure>

<p>jhat 命令执行后，会启动一个 HTTP 服务器，并将 Java 堆转储文件加载到服务器中。<br>可以通过浏览器访问 jhat 服务器，默认端口为 7000，查看 Java 堆中的对象、引用和其他相关信息。<br>jhat 工具的优点在于它提供了一个基于 Web 的用户界面，可以帮助开发人员快速定位 Java 程序中的内存问题。</p>
<p>使用 jhat 工具需要注意以下几点：</p>
<ul>
<li>jhat 工具需要加载整个 Java 堆转储文件到内存中，如果文件很大，可能会占用大量的内存，因此在处理大型堆转储文件时，需要考虑服务器的内存大小和性能。</li>
<li>jhat 工具只提供了一个静态的快照，无法监控 Java 堆的动态变化，对于监控实时性要求比较高的场景，建议使用其他工具，例如 jstat、jconsole 等。</li>
<li>jhat 工具的用户界面相对简单，对于一些高级的内存问题，可能需要配合使用其他工具，例如 Eclipse Memory Analyzer（MAT）等。</li>
</ul>
<h2 id="jmap-导出内存映像文件-amp-内存使用情况"><a href="#jmap-导出内存映像文件-amp-内存使用情况" class="headerlink" title="jmap 导出内存映像文件&amp;内存使用情况"></a>jmap 导出内存映像文件&amp;内存使用情况</h2><p>jmap 是 JDK 自带的一个命令行工具，可以用于生成 Java 应用程序的内存映像文件（heap dump）和打印 Java 应用程序的内存使用情况。通过分析 Java 应用程序的内存使用情况，可以发现应用程序中的内存泄漏和内存溢出等问题，进而优化应用程序的性能和稳定性。</p>
<p>下面介绍 jmap 工具的两个常用功能：</p>
<p>1、生成内存映像文件<br>使用 jmap 工具生成 Java 应用程序的内存映像文件，可以用于分析应用程序的内存使用情况，包括对象的数量、类型、大小等信息，以及各种对象之间的引用关系。可以使用 jmap 工具生成两种类型的内存映像文件：</p>
<ul>
<li>文本格式：可以用文本编辑器打开，便于查看和分析，但文件大小较大。</li>
<li>二进制格式：不能直接打开，但文件大小较小，适合在生产环境中使用。</li>
</ul>
<p>以下是生成内存映像文件的 jmap 命令示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jmap -dump:file=heapdump.<span class="built_in">bin</span> &lt;pid&gt;</span><br></pre></td></tr></table></figure>

<p>其中，file 指定生成的内存映像文件名，pid 指定 Java 应用程序的进程 ID。</p>
<p>2、打印内存使用情况<br>使用 jmap 工具打印 Java 应用程序的内存使用情况，可以了解应用程序中各个对象的数量、大小、类型、占用空间等信息，可以帮助开发人员定位内存泄漏、内存溢出等问题。</p>
<p>以下是打印内存使用情况的 jmap 命令示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jmap -heap &lt;pid&gt;</span><br><span class="line">其中，pid 指定 Java 应用程序的进程 ID。</span><br></pre></td></tr></table></figure>

<p>jmap 工具还可以使用一些选项，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-histo：按对象类型统计 Java 堆中的对象数量、大小等信息。</span><br><span class="line">-F：在无法正常生成内存映像文件时，强制 jmap 工具生成内存映像文件，但可能会导致生成的内存映像文件不完整或损坏。</span><br><span class="line">-hprof：将生成的内存映像文件保存为 HPROF 格式，便于使用其他工具进行分析和调试。</span><br><span class="line">-J：将选项传递给 JVM，例如设置堆大小、设置 JVM 参数等。</span><br></pre></td></tr></table></figure>

<p>需要注意的是，jmap 工具只能用于分析 Java 应用程序的内存使用情况，无法用于分析 CPU 占用率、线程状态等信息。如果需要分析这些信息，可以使用其他工具，例如 jstat、jstack 等。jmap 工具在生成内存映像文件或打印内存使用情况时，会暂停 Java 应用程序的执行，可能会导致应用程序的性能下降或出现短暂的停顿。因此，在生产环境中需要谨慎使用，建议在非生产环境中进行测试和分析。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>线上问题排查</title>
    <url>/2023/02/01/Operation/Top_Analyse/</url>
    <content><![CDATA[<h2 id="线上cpu飙高时问题排查命令？"><a href="#线上cpu飙高时问题排查命令？" class="headerlink" title="线上cpu飙高时问题排查命令？"></a>线上cpu飙高时问题排查命令？</h2><ul>
<li>查看所有进程cpu使用：使用top命令 查看cpu使用情况</li>
<li>定位线程：比如PID&#x3D;1893 命令：top-Hp 1893</li>
<li>定位代码：比如ID&#x3D;4519的线程cpu飙升则 需要把4519这个线程转成16进制，命令：printf %x 4519 得到nid</li>
<li>接下来 在jstack中找到相应的堆栈信息jstack pid |grep ‘nid’ -C5 –color</li>
<li>或者通过jstack命令，查看栈信息，命令sudo -u admin jstack 1893 |grep -A 200 11a7。</li>
</ul>
<p>另外，线上问题排查还可以使用Alibaba开源的工具Arthas进行排查，以上问题，可以使用一下命令定位：<br>thread -n 3 &#x2F;&#x2F;查看cpu占比前三的线程</p>
<h2 id="频繁gc？"><a href="#频繁gc？" class="headerlink" title="频繁gc？"></a>频繁gc？</h2><p>也可以使用jstat来分析问题可以先确定下gc是不是太频繁，使用jstat -gc pid 1000命令来对gc分代变化情况进行观察，<br>1000表示采样间隔(ms)，S0C&#x2F;S1C、S0U&#x2F;S1U、EC&#x2F;EU、OC&#x2F;OU、MC&#x2F;MU分别代表两个Survivor区、Eden区、老年代、元数据区的容量和使用量。<br>YGC&#x2F;YGT、FGC&#x2F;FGCT、GCT则代表YoungGc、FullGc的耗时和次数以及总耗时。如果看到gc比较频繁，再针对gc方面做进一步分析。</p>
<p><img src="/source/_posts/Operation/Top_Analyse/jstat.png" alt="jstat.png"></p>
<img src="/2023/02/01/Operation/Top_Analyse/jstat.png" class="" title="加载失败">

<h2 id="线上Out-of-Memory-Error如何定位问题？"><a href="#线上Out-of-Memory-Error如何定位问题？" class="headerlink" title="线上Out of Memory Error如何定位问题？"></a>线上Out of Memory Error如何定位问题？</h2><p>使用工具查看内存使用情况，如 top、htop、vmstat、free 等。这些工具可以帮助您查看内存使用情况，并确定高内存使用的进程。<br>free -h</p>
<h2 id="查看内存占用最高的进程"><a href="#查看内存占用最高的进程" class="headerlink" title="查看内存占用最高的进程"></a>查看内存占用最高的进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux --sort -rss</span><br></pre></td></tr></table></figure>

<p>使用 “gcore <pid>“ 对占用内存最多的进程进行转储。<br>使用 “valgrind –tool&#x3D;memcheck –leak-check&#x3D;full <program>“ 检查程序中的内存泄露。</p>
<ul>
<li><p>如果你想要更细粒度的监控内存, 你可以使用 valgrind 和massif工具来检测内存泄漏。<br>使用工具查看堆栈信息，如 jmap、jstack 等。这些工具可以帮助您查看线程堆栈信息，并确定高内存使用的代码。<br>使用 “jmap -heap <pid>“ 查看 Java 进程的堆内存使用情况。<br>使用 “jmap -histo <pid>“ 查看 Java 进程中对象的内存使用情况。<br>使用 “jstack <pid>“ 查看 Java 进程的堆栈跟踪信息。<br>使用 “jstack -F <pid>“ 强制导出 Java 进程的堆栈跟踪信息。<br>使用 “jstack -m <pid>“ 查看 Java 进程中的多线程堆栈跟踪信息。</p>
</li>
<li><p>分析 GC 日志，查看垃圾收集器的工作情况。如果 GC 次数过多或停顿时间过长，可能是内存泄露的原因。<br>使用 “-verbose:gc” 选项启用 GC 日志记录。<br>使用 “-XX:+PrintGCDetails” 选项记录 GC 的详细信息。<br>使用 “-Xloggc:<file>“ 选项将 GC 日志写入指定文件。<br>使用工具如 GCViewer、VisualVM 等来可视化 GC 日志。<br>通过观察 GC 日志中的每次 GC 操作的耗时、垃圾收集类型、回收的内存大小等信息来分析 GC 情况。</p>
</li>
<li><p>检查代码中是否有内存泄露的现象，如有大量的对象创建或长时间不释放的对象。</p>
</li>
<li><p>检查代码是否有内存消耗过大的操作，如频繁创建大量对象或使用大量缓存。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>问题排查</tag>
      </tags>
  </entry>
  <entry>
    <title>系统问题排查工具</title>
    <url>/2023/02/01/Operation/sys_check_tool/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smartmontools</span><br><span class="line">lm_sensors</span><br><span class="line">iotop</span><br><span class="line">sysstat</span><br><span class="line">nc</span><br><span class="line">nmap</span><br><span class="line">lrzsz</span><br><span class="line">strace</span><br><span class="line">vim</span><br></pre></td></tr></table></figure>

<p>排查iowait问题</p>
<p>iotop<br>参考：<a href="https://blog.csdn.net/chj_1224365967/article/details/108142938">https://blog.csdn.net/chj_1224365967/article/details/108142938</a><br>iotop (选项)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-o：只显示有io操作的进程</span><br><span class="line">-b：批量显示，无交互，主要用作记录到文件。</span><br><span class="line">-n NUM：显示NUM次，主要用于非交互式模式。</span><br><span class="line">-d SEC：间隔SEC秒显示一次。</span><br><span class="line">-p PID：监控的进程pid。</span><br><span class="line">-u USER：监控的进程用户。</span><br></pre></td></tr></table></figure>

<p>iostats<br>参考：<a href="https://blog.csdn.net/huxinglixing/article/details/116306731">https://blog.csdn.net/huxinglixing/article/details/116306731</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">参数    详解</span><br><span class="line"></span><br><span class="line">-c    只显示cpu相关统计信息（默认是同时显示cpu和磁盘信息）</span><br><span class="line"></span><br><span class="line">-d    只显示磁盘统计信息（默认是同时显示cpu和磁盘信息）</span><br><span class="line"></span><br><span class="line">-h    使用NFS的输出报告更加友好可读。</span><br><span class="line"></span><br><span class="line">-j &#123; ID | LABEL | PATH | UUID | … &#125;    磁盘列表的Device列要用什么维度来描述磁盘</span><br><span class="line"></span><br><span class="line">-k    默认情况下，iostat的输出是以block作为计量单位，加上这个参数可以以kb作为计量单位显示。（该参数仅在linux内核版本2.4以后数据才是准确的）</span><br><span class="line"></span><br><span class="line">-m    默认情况下，iostat的输出是以block作为计量单位，加上这个参数可以以mb作为计量单位显示。（该参数仅在linux内核版本2.4以后数据才是准确的）</span><br><span class="line"></span><br><span class="line">-N    显示磁盘阵列(LVM) 信息</span><br><span class="line"></span><br><span class="line">-n    显示NFS相关统计数据（network fileSystem）。（该参数只在linux内核版本2.6.17之后有用）</span><br><span class="line"></span><br><span class="line">-p [ &#123; device [,…] | ALL &#125; ]    显示磁盘分区的相关统计信息（默认粒度只到磁盘，没有显示具体的逻辑分区）</span><br><span class="line"></span><br><span class="line">-t    显示终端和CPU的信息，每次输出报告时显示系统时间。</span><br><span class="line"></span><br><span class="line">-V    显示当前iostat的版本信息</span><br><span class="line"></span><br><span class="line">-x    显示更详细的磁盘报告信息，默认只显示六列，加上该参数后会显示更详细的信息。（该参数需要在内核版本2.4之后才能使用）</span><br><span class="line"></span><br><span class="line">-y    跳过不显示第一次报告的数据，因为iostat使用的是采样统计，所以iostat的第一次输出的数据是自系统启动以来累计的数据</span><br><span class="line"></span><br><span class="line">-z    只显示在采样周期内有活动的磁盘</span><br></pre></td></tr></table></figure>

<p>每1s刷新一次，共刷新10次，-K表示单位为kb，-d表示只统计磁盘信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat -d -k 1 10</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>问题排查</tag>
      </tags>
  </entry>
  <entry>
    <title>编码规范</title>
    <url>/2023/02/22/Learn/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h2><h3 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h3><ul>
<li>【强制】变量命名主流的三种：<ul>
<li>小驼峰、大驼峰命名法（JAVA中推荐）</li>
<li>下划线命名法</li>
<li>匈牙利命名法（匈牙利命名法是：变量名 &#x3D; 属性 + 类型 + 对象描述）</li>
</ul>
</li>
<li>【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</li>
<li>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</li>
<li>【强制】杜绝完全不规范的缩写，避免望文不知义。</li>
<li>【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用Impl 的后缀与接口区别。</li>
<li>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</li>
<li>【参考】枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</li>
</ul>
<h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><ul>
<li>【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</li>
<li>【强制】在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解.</li>
<li>【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。<br>说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。<br>正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。</li>
</ul>
<h3 id="OOP-规约"><a href="#OOP-规约" class="headerlink" title="OOP 规约"></a>OOP 规约</h3><ul>
<li>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可</li>
<li>【强制】所有的覆写方法，必须加@Override 注解。</li>
<li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</li>
<li>【强制】不能使用过时的类或方法。</li>
<li>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。</li>
<li>【强制】为了防止精度损失，禁止使用构造方法 BigDecimal(double)的方式把 double 值转化为 BigDecimal 对象。</li>
<li>【强制】定义 DO&#x2F;DTO&#x2F;VO 等 POJO 类时，不要设定任何属性默认值</li>
<li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</li>
<li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>
<li>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于下一条。</li>
<li>【推荐】 类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter &#x2F; setter方法。</li>
</ul>
<h3 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h3><ul>
<li>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：<ul>
<li>只要覆写 equals，就必须覆写 hashCode。因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两个方法。</li>
<li>如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</li>
<li>说明：String 已覆写 hashCode 和 equals 方法，所以我们可以愉快地使用 String 对象作为 key 来使用。</li>
</ul>
</li>
<li>【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常，即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</li>
<li>【强制】使用 Map 的方法 keySet()&#x2F;values()&#x2F;entrySet()返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常。可以使用迭代器方式遍历添加元素。</li>
<li>【强制】在 subList 场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生 ConcurrentModificationException 异常。</li>
<li>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。</li>
<li>【强制】不要在 foreach 循环里进行元素的 remove&#x2F;add 操作。remove 元素请使用Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">正例：</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>); </span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>); </span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator(); </span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123; </span><br><span class="line"><span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> iterator.next(); </span><br><span class="line"><span class="keyword">if</span> (删除元素的条件) &#123;</span><br><span class="line">    iterator.remove(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h3><ul>
<li>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</li>
<li>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">正例：自定义线程工厂，并且根据外部特征进行分组，比如机房信息。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">nextId</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 定义线程组名称，在 jstack 问题排查时，非常有帮助</span></span><br><span class="line">UserThreadFactory(String whatFeaturOfGroup) &#123;</span><br><span class="line"> namePrefix = <span class="string">&quot;From UserThreadFactory&#x27;s &quot;</span> + whatFeaturOfGroup + <span class="string">&quot;-Worker-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> namePrefix + nextId.getAndIncrement();</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="literal">null</span>, task, name, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line"> System.out.println(thread.getName());</span><br><span class="line"> <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。<ul>
<li>说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问<br>题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题</li>
</ul>
</li>
<li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险<ul>
<li>说明：Executors 返回的线程池对象的弊端如下：<br>1） FixedThreadPool 和 SingleThreadPool：<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2） CachedThreadPool：<br>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li>
</ul>
</li>
<li>【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类<ul>
<li>说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，<br>DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable<br>thread-safe。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;DateFormat&gt;() &#123; </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">protected</span> DateFormat <span class="title function_">initialValue</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<ul>
<li>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁</li>
</ul>
</li>
<li>【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。<ul>
<li>说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。</li>
</ul>
</li>
<li>【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。<ul>
<li>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于3 次</li>
</ul>
</li>
<li>【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，如果在处理定时任务时使用ScheduledExecutorService 则没有这个问题。</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h2 id="安全规约"><a href="#安全规约" class="headerlink" title="安全规约"></a>安全规约</h2><h2 id="数据库规约"><a href="#数据库规约" class="headerlink" title="数据库规约"></a>数据库规约</h2><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><h2 id="设计规约"><a href="#设计规约" class="headerlink" title="设计规约"></a>设计规约</h2>]]></content>
      <categories>
        <category>工作总结</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>架构思想</title>
    <url>/2023/02/22/Learn/%E6%9E%B6%E6%9E%84%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<p>来自：<a href="https://github.com/aalansehaiyang/technology-talk/blob/master/system-architecture/architecture-experience.md">https://github.com/aalansehaiyang/technology-talk/blob/master/system-architecture/architecture-experience.md</a></p>
<h2 id="架构思想"><a href="#架构思想" class="headerlink" title="架构思想"></a>架构思想</h2><p>架构其实就是把复杂的问题抽象化、简单化，可能你会觉得“说起来容易但做起来难”，如何能快速上手。可以多观察，根据物质决定意识，借助生活真实场景（用户故事，要很多故事）来还原这一系列问题，抓住并提取核心特征。</p>
<p>CPU运算速度&gt;&gt;&gt;&gt;&gt;内存的读写速度&gt;&gt;&gt;&gt;磁盘读写速度</p>
<ul>
<li>满足业务发展需求是最高准则</li>
<li>业务建模，抽象和枚举是两种方式，需要平衡，不能走极端</li>
<li>模型要能更真实的反应事物的本质，不是名词概念的堆砌，不能过度设计</li>
<li>基础架构最关键的是分离不同业务领域、不同技术领域，让整个系统具有持续优化的能力。</li>
<li>分离基础服务、业务规则、业务流程，选择合适的工具外化业务规则和业务流程</li>
<li>分离业务组件和技术组件，高类聚，低耦合 - 业务信息的执行可以分散，但业务信息的管理要尽量集中</li>
<li>不要让软件的逻辑架构与最后物理部署绑死 - 选择合适的技术而不是高深的技术，随着业务的发展调整使用的技术</li>
<li>好的系统架构需要合适的组织架构去保障 - 团队成员思想的转变，漫长而艰难</li>
<li>业务架构、系统架构、数据模型</li>
</ul>
<h2 id="面对一块新业务，如何系统架构？"><a href="#面对一块新业务，如何系统架构？" class="headerlink" title="面对一块新业务，如何系统架构？"></a>面对一块新业务，如何系统架构？</h2><ul>
<li>业务分析：输出业务架构图，这个系统里有多少个业务模块，从前台用户到底层一共有多少层。</li>
<li>系统划分：根据业务架构图输出系统架构图，需要思考的是这块业务划分成多少个系统，可能一个系统能支持多个业务。基于什么原则将一个系统拆分成多个系统？又基于什么原则将两个系统合并成一个系统？</li>
<li>系统分层：系统是几层架构，基于什么原则将一个系统进行分层，分成多少层？</li>
<li>模块化：系统里有多少个模块，哪些需要模块化？基于什么原则将一类代码变成一个模块。</li>
</ul>
<h2 id="如何模块化？"><a href="#如何模块化？" class="headerlink" title="如何模块化？"></a>如何模块化？</h2><ul>
<li>基于水平切分。把一个系统按照业务类型进行水平切分成多个模块，比如权限管理模块，用户管理模块，各种业务模块等。</li>
<li>基于垂直切分。把一个系统按照系统层次进行垂直切分成多个模块，如DAO层，SERVICE层，业务逻辑层。</li>
<li>基于单一职责。将代码按照职责抽象出来形成一个一个的模块。将系统中同一职责的代码放在一个模块里。比如我们开发的系统要对接多个渠道的数据，每个渠道的对接方式和数据解析方式不一样，为避免不同渠道代码的相互影响，我们把各个渠道的代码放在各自的模块里。</li>
<li>基于易变和不易变。将不易变的代码抽象到一个模块里，比如系统的比较通用的功能。将易变的代码放在另外一个或多个模块里，比如业务逻辑。因为易变的代码经常修改，会很不稳定，分开之后易变代码在修改时候，不会将BUG传染给不变的代码。</li>
</ul>
<h2 id="提升系统的稳定性"><a href="#提升系统的稳定性" class="headerlink" title="提升系统的稳定性"></a>提升系统的稳定性</h2><ul>
<li>流控<br>双11期间，对于一些重要的接口（比如帐号的查询接口，店铺首页）做流量控制，超过阈值直接返回失败。 另外对于一些不重要的业务也可以考虑采用降级方案，大促—&gt;邮件系统。根据28原则，提前将大卖家约1W左右在缓存中预热，并设置起止时间，活动期间内这部分大卖家不发交易邮件提醒，以减轻SA邮件服务器的压力。</li>
<li>容灾<br>最大程度保证主链路的可用性，比如我负责交易的下单，而下单过程中有优惠的业务逻辑，此时需要考虑UMP系统挂掉，不会影响用户下单（后面可以通过修改价格弥补），采用的方式是，如果优惠挂掉，重新渲染页面，并增加ump屏蔽标记，下单时会自动屏蔽ump的代码逻辑。 另外还会记录ump系统不可用次数，一定时间内超过阈值，系统会自动报警。</li>
<li>稳定性<br>第三方系统可能会不稳定，存在接口超时或宕机，为了增加系统的健壮性，调用接口时设置超时时间以及异常捕获处理。</li>
<li>容量规划<br>做好容量规划、系统间强弱依赖关系梳理。 如：冷热数据不同处理，早期的订单采用oracle存储，随着订单的数量越来越多，查询缓慢，考虑数据迁移，引入历史表，将已归档的记录迁移到历史表中。当然最好的方法是分库分表。</li>
</ul>
<h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><ul>
<li>分布式系统</li>
<li>分布式缓存</li>
<li>分布式数据</li>
</ul>
<h2 id="架构主要环节"><a href="#架构主要环节" class="headerlink" title="架构主要环节"></a>架构主要环节</h2><ul>
<li>业务拆分：将整个网站业务拆分成不同的应用，每个应用独立部署维护，应用之间通过RPC或消息队列通信。</li>
<li>集群化（应用服务器；基于RPC的微服务应用等）</li>
<li>LVS负载均衡，负责将请求转发给不同业务集群</li>
<li>反向代理服务器，常用的如Nginx</li>
<li>应用服务器，servlet容器，如tomcat</li>
<li>应用和数据服务分离，分别部署在不同的服务器</li>
<li>后端应用合理分层，通常分为表现层或网关层、业务逻辑层、数据持久层</li>
<li>缓存。分为两种：本地缓存；分布式缓存</li>
<li>CDN化。静态内容部署到CDN，就近获取，加速网站响应。</li>
<li>数据库读写分离。数据库采用主从热备，应用服务器在写数据时访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库。</li>
<li>分库分表，引入分布式数据框架</li>
<li>引入NoSQL，支持海量数据存储</li>
<li>借助elastics search等开源搜索引擎</li>
<li>异步化，系统解耦。</li>
<li>缩短业务流程，加快网站访问速度</li>
<li>消除并发访问高峰</li>
</ul>
<h2 id="架构五要素"><a href="#架构五要素" class="headerlink" title="架构五要素"></a>架构五要素</h2><ul>
<li><p>高性能</p>
<ul>
<li>性能的测试指标主要有 <ul>
<li>响应时间：指应用执行一个操作需要的时间</li>
<li>并发数：指系统能够同时处理请求的数目</li>
<li>QPS：指单位时间内系统处理的请求量</li>
<li>系统性能计数器：描述服务器或者操作系统性能的一些数据指标</li>
</ul>
</li>
</ul>
</li>
<li><p>可用性(Availability) 目的是保证服务器硬件故障时服务依然可用、数据依然保存并能够被访问，主要手段数据和服务的冗余备份及失效转移</p>
<ul>
<li>高可用的应用：显著特点是应用的无状态性<ul>
<li>通过负载均衡进行无状态服务的失效转移</li>
<li>应用服务器集群的 Session 管理</li>
<li>高可用的服务：无状态的服务，可使用类似负载均衡的失效转移策略，此外还有如下策略</li>
<li>超时设置</li>
<li>异步调用</li>
<li>服务降级</li>
<li>限流</li>
</ul>
</li>
<li>高可用的数据：主要手段是数据备份和失效转移机制<ul>
<li>失效确认</li>
<li>访问转移</li>
<li>数据恢复</li>
<li>冷备：缺点是不能保证数据最终一致和数据可用性</li>
<li>热备：分为异步热备和同步热备</li>
<li>数据一致性(Consisitency)</li>
<li>数据可用性(Availibility)</li>
<li>分区耐受性(Partition Tolerance)</li>
<li>CAP 原理</li>
<li>数据备份</li>
</ul>
</li>
</ul>
</li>
<li><p>伸缩性(Scalability)</p>
<ul>
<li>应用服务器集群的伸缩性设计<ul>
<li>轮询(Round Robin, RR)</li>
<li>加权轮询(Weighted Round Robin, WRR)</li>
<li>随机(Random)</li>
<li>最少链接(Least Connections)</li>
<li>源地址散列(Source Hashing)</li>
<li>DNS 域名解析负载均衡</li>
<li>反向代理负载均衡(在 HTTP 协议层面，应用层负载均衡)</li>
<li>IP 负载均衡(在内核进程完成数据分发)</li>
<li>数据链路层负载均衡(数据链路层修改 mac 地址，三角传输模式，LVS)</li>
</ul>
</li>
<li>分布式缓存集群的伸缩性设计<ul>
<li>Memcached 客户端（包括 API，路由算法，服务器列表，通信模块）</li>
<li>Memcached 服务器集群</li>
<li>分布式缓存的一致性 Hash 算法(一致性 Hash 环，虚拟层)</li>
</ul>
</li>
<li>数据存储服务集群的伸缩性设计<ul>
<li>关系数据库集群的伸缩性设计</li>
<li>NoSQL 数据库的伸缩性设计</li>
</ul>
</li>
</ul>
</li>
<li><p>扩展性(Extensibility)：系统架构设计层面的“开闭原则”，构建可扩展的网站架构</p>
<ul>
<li>利用分布式消息队列降低耦合性<ul>
<li>分布式消息队列</li>
<li>事件驱动架构(Event Driven Architecture)</li>
</ul>
</li>
<li>利用分布式服务打造可复用的业务平台<ul>
<li>分布式服务框架设计(Thrift，Dubbo)</li>
</ul>
</li>
<li>可扩展的数据结构(如 HBase的 ColumnFamily 设计)</li>
<li>利用开放平台建设网站生态圈</li>
</ul>
</li>
<li><p>安全性：XSS 攻击和 SQL 注入攻击是构成网站应用攻击最主要的两种手段，此外还包括 CSRF,Session 劫持等手段。</p>
<ul>
<li>攻击与防御<ul>
<li><p>Error Code</p>
</li>
<li><p>表单 Token</p>
</li>
<li><p>验证码</p>
</li>
<li><p>jsonp请求的，Referer 校验</p>
</li>
<li><p>SQL 注入</p>
</li>
<li><p>html 危险字符转义</p>
</li>
<li><p>XSS 攻击：跨站点脚本攻击（Cross Site Script）</p>
</li>
<li><p>对js转义，使其失去执行功能，只作为纯字符串展示</p>
</li>
<li><p>CSRF 攻击：跨站点请求伪造（Cross Site Request Forgery）</p>
</li>
</ul>
</li>
<li>防范：httpOnly;增加token校验;通过Referer识别。<ul>
<li>网站安全漏洞扫描</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>工作总结</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
</search>
